!function(){"use strict";angular.module("app",["ui.sortable"])}(),function(){"use strict";function e(e,t,n,o,a,u){function r(e,t){$.authToken=t,c(t),l()}function i(e,t){var n=angular.extend({},$.resume.sections[t]);$.resume.sections.splice(t,0,n),f(n,t)}function s(e,t){$.resume.sections.splice(t,1),p(t)}function c(e){a.getResumeData(e).then(function(e){$.resume=e})}function l(){var t=angular.element("div.margins");o.getTemplate().then(function(o){t.html(o),e(t.contents())(n)})}function f(e,t){if($.authToken&&"default"!==$.authToken){var n={authToken:$.authToken,newSection:e,sectionIndex:t};u.emit("add-section",n)}}function p(e){if($.authToken&&"default"!==$.authToken){var t={authToken:$.authToken,sectionIndex:e};u.emit("remove-section",t)}}function d(){if($.authToken&&"default"!==$.authToken){var e={authToken:$.authToken,sections:$.resume.sections};u.emit("sortable-event",e)}}function m(e){for(var t=$.resume,n=e.path.split("."),o=n.pop(),a=e.val,u=0,r=n.length;r>u;u++)t=t[n[u]];isNaN(o)?t[o]=a:t.set(parseInt(o,10),a)}function h(){var e=angular.element("#authToken").attr("value");t.$broadcast("auth-token",e)}function g(e){if($.authToken&&"default"!==$.authToken){var t={authToken:$.authToken,path:e.target.getAttribute("data"),val:e.target.innerHTML};m(t),u.emit("value-change",t)}}var v=t,$=this;$.authToken="",$.resume,$.init=h,$.emit=g,$.sortableSections={axis:"y",tolerance:"intersect",handle:".section-handle",cancel:".section-title",stop:function(e,t){d()}},v.$on("auth-token",r),v.$on("section added",i),v.$on("section removed",s)}angular.module("app").controller("appCtrl",e),e.$inject=["$compile","$rootScope","$scope","layoutService","resumeService","socket"]}(),function(){"use strict";function e(e,t,n,o){function a(t){angular.element("#authToken").attr("value",t),e.$broadcast("auth-token",t)}function u(e){angular.element(e).modal("hide"),r(),i()}function r(){angular.element("#suPassword").tooltip("hide"),d.suUsername="",d.suPassword="",d.suError=""}function i(){d.liUsername="",d.liPassword="",d.liError=""}function s(){n.signup(d.suUsername,d.suPassword).then(function(e){e.message?d.suError=e.message:(a(e.id),u("#suModal"))})}function c(){n.login(d.liUsername,d.liPassword).then(function(e){e.message?d.liError=e.message:(a(e.id),u("#liModal"))})}function l(){n.logout().then(function(){angular.element("#authToken").attr("value","default"),e.$broadcast("auth-token","default")})}function f(e){e.target.value.length<6?angular.element(e.target).tooltip("show"):angular.element(e.target).tooltip("hide")}function p(){var e={username:d.suUsername};o.emit("username",e)}var d=this,m=angular.element("#suUsername");d.suUsername,d.suPassword,d.suUsernameError="",d.suError="",d.liUsername,d.liPassword,d.liError="",d.signup=s,d.login=c,d.logout=l,d.suTooltip=f,d.validateUser=p,o.on("username available",function(){m.removeClass("unavailable")}),o.on("username unavailable",function(e){m.addClass("unavailable")})}angular.module("app").controller("authCtrl",e),e.$inject=["$rootScope","$scope","authService","socket"]}(),function(){"use strict";function e(e){function t(t,n,o){t.add=function(t,n){e.$broadcast("section added",n)},n.parent().bind("mouseenter",function(){n.show()}),n.parent().bind("mouseleave",function(){n.hide()})}return{restrict:"E",template:'<button type="button" class="close"><span>+</span></button>',link:t}}angular.module("app").directive("prAdd",e),e.$inject=["$rootScope"]}(),function(){"use strict";function e(e){function t(t,n,o){t.remove=function(t,n){e.$broadcast("section removed",n)},n.parent().bind("mouseenter",function(){n.show()}),n.parent().bind("mouseleave",function(){n.hide()})}return{restrict:"E",template:'<button type="button" class="close"><span>Ã—</span></button>',link:t}}angular.module("app").directive("prRemove",e),e.$inject=["$rootScope"]}(),function(){"use strict";function e(e){return function(t){return e.trustAsHtml(t)}}angular.module("app").filter("unescaped",e),e.$inject=["$sce"]}(),function(){"use strict";function e(e,t){function n(n,o){var a={username:n,password:o};return e.post("/signup",a).then(function(e){return e.data},function(e){return t.error("XHR Failed for authService.signup"),e.data})}function o(n,o){var a={username:n,password:o};return e.post("/login",a).then(function(e){return e.data},function(e){return t.error("XHR Failed for authService.login"),e.data})}function a(){return e.post("/logout")["catch"](function(){t.error("XHR Failed for authService.logout")})}return{signup:n,login:o,logout:a}}angular.module("app").factory("authService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function n(n){var n=n||"default";return e.get("/template?templateID="+n).then(function(e){return e.data})["catch"](function(){t.error("XHR Failed for getTemplate")})}return{getTemplate:n}}angular.module("app").factory("layoutService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e,t){function n(n){var o={authToken:n};return e.post("/resume",o).then(function(e){return e.data})["catch"](function(){t.error("XHR Failed for getResumeData")})}return{getResumeData:n}}angular.module("app").factory("resumeService",e),e.$inject=["$http","$log"]}(),function(){"use strict";function e(e){function t(t,n){o.on(t,function(){var t=arguments;e.$apply(function(){n.apply(o,t)})})}function n(t,n,a){o.emit(t,n,function(){var t=arguments;e.$apply(function(){a&&a.apply(o,t)})})}var o=io.connect();return{on:t,emit:n}}angular.module("app").factory("socket",e),e.$inject=["$rootScope"]}();
//# sourceMappingURL=data:application/json;base64,
